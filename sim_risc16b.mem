// exAluC{
//  if(ain - bin > 0)
//   dout = 255 -(ain - bin);
//  else
//   dout = 255 - (bin - ain);
// }

//T c000
@0000 00110111 11000000  // lui r7, #c0 

//s b000
@0002 00001000 01110001  // lli r0, #71
@0004 00110001 10100010  // lui r1, #a2
@0006 00000000 00110000  // sw r0, (r1)

@0008 00001000 01110001  // lli r0, #71
@000a 00110001 10100001  // lui r1, #a1
@000c 00000000 00110000  // sw r0, (r1)

//s b000
@000e 00110010 10110000  // lui r2, #b0

@0010 00110011 00000000  // lui r3, #00

//r7 --> r6 copy
@0012 00000110 11100001  // mov r6, r7

//s-loop
//i-loop(y)
@0014 00001101 00010000  // lli r5, 16
//j-loop(x)
@0016 00001100 00010000  // lli r4, 16

//T(c000) --> r0
@0018 00000000 11010011  // lbu r0, (r6)
//s(b000) --> r1
@001a 00000001 01010011  // lbu r1, (r2)

@001c 00000000 00101100  // exoc r0, r1
@001e 00000000 00000000  // nop

@0020 00000011 00000100  // add r3, r0
@0022 00100010 00000001  // addi r2, 1

//j-loop last
@0024 00100110 00000001  // addi r6, 1 
@0026 00100100 11111111  // addi r4, -1
@0028 10001100 11101110  // bnez r4, -18
@002a 00000000 00000000  // nop

//i-loop last
@002c 00100110 01110000  // addi r6, 112 // 次の段
@002e 00100101 11111111  // addi r5, -1
@0030 10001101 11100100  // bnez r5, -28
@0032 00000000 00000000  // nop

//r4,r5==0 --> 1/2
@0034 00000011 01101001  // sr r3, r3

//call best(E)
@0036 00110000 10111111  // lui r0, #bf
@0038 00100000 00000010  // addi r0, 2
@003a 00000001 00010001  // lw r1, (r0)

//if best-E
@003c 00000001 01100101  // sub r1, r3
@003e 10011001 00001000  // bpl r1,8 //+
@0040 00000000 00000000  // nop
@0042 00000011 00010000  // sw r3, (r0)
@0044 00100000 11111110  // addi r0, -2
@0046 00000111 00010000  // sw r7, (r0)

@0048 00100111 00000001  // addi r7, 1
@004a 00110001 10100001  // lui r1, #a1
@004c 00000000 00110001  // lw r0, (r1)
@004e 00100000 11111111  // addi r0, -1
@0050 00000000 00110000  // sw r0, (r1)
@0052 10001000 10111010  // bnez r0, -70
@0054 00000000 00000000  // nop

@0056 00100111 00001111  // addi r7, 15
@0058 00110001 10100010  // lui r1, #a2
@005a 00000000 00110001  // lw r0, (r1)
@005c 00100000 11111111  // addi r0, -1
@005e 00000000 00110000  // sw r0, (r1)
@0060 10001000 10100110  // bnez r0, -90
@0062 00000000 00000000  // nop

@0064 00110101 10111111  // lui r5, #bf
@0066 00000111 10110001  // lw r7, (r5)
@0068 00110100 11000000  // lui r4, #c0
@006a 00000111 10000101  // sub r7, r4
//r7 y, r6 x
@006c 00000110 11100001  // mov r6, r7

//y
@006e 00000111 11101000  // sl r7, r7
@0070 00000111 11100111  // sr8 r7, r7
@0072 00000111 10110010  // sbu r7, (r5)
//x
@0074 00100101 00000001  // addi r5, 1
@0076 00000110 11001000  // sl r6, r6
@0078 00000110 11001000  // sl r6, r6
@007a 00000110 11001001  // sr r6, r6
@007c 00000110 11001001  // sr r6, r6
@007e 00000110 10110010  // sbu r6, (r5)

@0080 00000000 00000000  // nop
@0082 00000000 00000000  // nop
@0084 00000000 00000000  // nop
//j -2
//nop

//y bf00
@bf00 00000000 00000000  // SET @bf00 0 0
//x bf01
@bf01 00000000 00000000  // SET @bf01 0 0
//E bf02
@bf02 00000000 00000000  // SET @bf02 0 0
